<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Audio File Analyzer</title>
    <style>
        * {
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
        }

        body {
            background: #f0f2f5;
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.1);
            padding: 2rem;
        }

        .upload-section {
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            margin-bottom: 2rem;
            position: relative;
        }

        .upload-controls {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-top: 1rem;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: opacity 0.3s;
        }

        .btn-primary {
            background: #2196F3;
            color: white;
        }

        .btn-secondary {
            background: #4CAF50;
            color: white;
        }

        .progress-container {
            height: 20px;
            background: #eee;
            border-radius: 10px;
            margin: 1rem 0;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background: #2196F3;
            transition: width 0.3s ease;
        }

        .results-section {
            margin-top: 2rem;
            display: none;
        }

        .copy-btn {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: #666;
            color: white;
        }

        .analysis-section {
            margin: 2rem 0;
            padding: 1rem;
            border: 1px solid #eee;
            border-radius: 8px;
            position: relative;
        }

        .metric-table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }

        .metric-table td {
            padding: 8px;
            border-bottom: 1px solid #eee;
        }

        .metric-category {
            font-weight: bold;
            color: #2196F3;
            margin: 1rem 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Audio File Analyzer</h1>
        
        <div class="upload-section">
            <input type="file" id="fileInput" accept=".wav,.mp3" hidden>
            <div class="upload-controls">
                <button class="btn btn-primary" onclick="document.getElementById('fileInput').click()">
                    Select File
                </button>
                <button class="btn btn-secondary" id="uploadBtn" disabled>
                    Upload File
                </button>
            </div>
            <div class="progress-container">
                <div class="progress-bar" style="width: 0%"></div>
            </div>
            <p id="fileStatus">No file selected</p>
            <p>Supported formats: .wav, .mp3 | Max size: 50MB</p>
        </div>

        <div class="results-section" id="resultsSection">
            <button class="btn copy-btn" onclick="copyResults()">Copy All</button>
            
            <div class="analysis-section">
                <div class="metric-category">File Summary</div>
                <table class="metric-table" id="fileSummary"></table>
            </div>

            <div class="analysis-section">
                <div class="metric-category">File Detail</div>
                <table class="metric-table" id="fileDetails"></table>
            </div>

            <div class="analysis-section">
                <div class="metric-category">Channel Detail</div>
                <table class="metric-table" id="channelDetails"></table>
            </div>
        </div>
    </div>

    <script>
        let currentFile = null;
        let audioContext;

        document.getElementById('fileInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                if (file.size > 50 * 1024 * 1024) {
                    alert('File too large! Max 50MB');
                    return;
                }
                currentFile = file;
                document.getElementById('uploadBtn').disabled = false;
                document.getElementById('fileStatus').textContent = file.name;
            }
        });

        document.getElementById('uploadBtn').addEventListener('click', async () => {
            if (!currentFile) return;

            const progressBar = document.querySelector('.progress-bar');
            const resultsSection = document.getElementById('resultsSection');
            
            try {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const arrayBuffer = await currentFile.arrayBuffer();
                const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
                
                progressBar.style.width = '0%';
                resultsSection.style.display = 'none';

                const analysis = await processAudioSafe(audioBuffer, (progress) => {
                    progressBar.style.width = `${progress}%`;
                });

                displayResults(analysis);
                resultsSection.style.display = 'block';

            } catch (error) {
                alert('Error processing file: ' + error.message);
                console.error(error);
            }
        });

        async function processAudioSafe(audioBuffer, progressCallback) {
            const analysis = {
                summary: {},
                details: {},
                channels: []
            };

            // Basic file info
            analysis.summary = {
                fileName: currentFile.name,
                channels: audioBuffer.numberOfChannels,
                sampleRate: audioBuffer.sampleRate,
                duration: audioBuffer.duration,
                fileSize: currentFile.size,
                bitRate: Math.round((currentFile.size * 8) / audioBuffer.duration / 1000) + ' kbps',
                sampleEncoding: '32-bit float'
            };

            const channelData = [];
            for (let channel = 0; channel < audioBuffer.numberOfChannels; channel++) {
                channelData.push(audioBuffer.getChannelData(channel));
            }

            // Initialize analysis with Float32Arrays
            const analysisData = {
                maxAmplitude: new Float32Array(audioBuffer.numberOfChannels).fill(-Infinity),
                minAmplitude: new Float32Array(audioBuffer.numberOfChannels).fill(Infinity),
                sumSquares: new Float32Array(audioBuffer.numberOfChannels).fill(0),
                sum: new Float32Array(audioBuffer.numberOfChannels).fill(0),
                maxDelta: new Float32Array(audioBuffer.numberOfChannels).fill(0),
                deltaSum: new Float32Array(audioBuffer.numberOfChannels).fill(0),
                prevSample: new Float32Array(audioBuffer.numberOfChannels).fill(0)
            };

            const totalSamples = audioBuffer.length;
            const chunkSize = Math.min(44100, Math.floor(totalSamples / 100)); // Dynamic chunk sizing
            let processedSamples = 0;

            while (processedSamples < totalSamples) {
                const end = Math.min(processedSamples + chunkSize, totalSamples);
                
                for (let i = processedSamples; i < end; i++) {
                    for (let ch = 0; ch < channelData.length; ch++) {
                        const sample = channelData[ch][i];
                        
                        // Update channel-specific values
                        analysisData.maxAmplitude[ch] = Math.max(analysisData.maxAmplitude[ch], sample);
                        analysisData.minAmplitude[ch] = Math.min(analysisData.minAmplitude[ch], sample);
                        analysisData.sumSquares[ch] += sample * sample;
                        analysisData.sum[ch] += sample;
                        
                        if (i > 0) {
                            const delta = Math.abs(sample - analysisData.prevSample[ch]);
                            analysisData.deltaSum[ch] += delta;
                            analysisData.maxDelta[ch] = Math.max(analysisData.maxDelta[ch], delta);
                        }
                        analysisData.prevSample[ch] = sample;
                    }
                }
                
                processedSamples = end;
                progressCallback((processedSamples / totalSamples) * 100);
                await new Promise(resolve => requestAnimationFrame(resolve));
            }

            // Final calculations
            analysis.details = {
                samplesRead: totalSamples,
                maxAmplitude: Math.max(...analysisData.maxAmplitude),
                minAmplitude: Math.min(...analysisData.minAmplitude),
                midlineAmplitude: (Math.max(...analysisData.maxAmplitude) + Math.min(...analysisData.minAmplitude)) / 2,
                meanAmplitude: analysisData.sum.reduce((a, b) => a + b) / (totalSamples * channelData.length),
                rmsAmplitude: Math.sqrt(analysisData.sumSquares.reduce((a, b) => a + b) / (totalSamples * channelData.length)),
                maxDelta: Math.max(...analysisData.maxDelta),
                meanDelta: analysisData.deltaSum.reduce((a, b) => a + b) / ((totalSamples - 1) * channelData.length),
                volumeAdjustment: 1 / Math.max(
                    Math.abs(Math.max(...analysisData.maxAmplitude)),
                    Math.abs(Math.min(...analysisData.minAmplitude))
                )
            };

            // Channel analysis
            analysis.channels = channelData.map((data, index) => ({
                dcOffset: analysisData.sum[index] / totalSamples,
                minLevel: analysisData.minAmplitude[index],
                maxLevel: analysisData.maxAmplitude[index],
                rms: Math.sqrt(analysisData.sumSquares[index] / totalSamples)
            }));

            return analysis;
        }

        function displayResults(analysis) {
            // File Summary
            document.getElementById('fileSummary').innerHTML = `
                ${Object.entries(analysis.summary).map(([key, value]) => `
                    <tr><td>${key}</td><td>${value}</td></tr>
                `).join('')}
            `;

            // File Details
            document.getElementById('fileDetails').innerHTML = `
                <tr><td>Samples read</td><td>${analysis.details.samplesRead}</td></tr>
                <tr><td>Length (seconds)</td><td>${analysis.summary.duration.toFixed(6)}</td></tr>
                <tr><td>Maximum amplitude</td><td>${analysis.details.maxAmplitude.toFixed(6)}</td></tr>
                <tr><td>Minimum amplitude</td><td>${analysis.details.minAmplitude.toFixed(6)}</td></tr>
                <tr><td>Midline amplitude</td><td>${analysis.details.midlineAmplitude.toFixed(6)}</td></tr>
                <tr><td>Mean amplitude</td><td>${analysis.details.meanAmplitude.toFixed(6)}</td></tr>
                <tr><td>RMS amplitude</td><td>${analysis.details.rmsAmplitude.toFixed(6)}</td></tr>
                <tr><td>Maximum delta</td><td>${analysis.details.maxDelta.toFixed(6)}</td></tr>
                <tr><td>Mean delta</td><td>${analysis.details.meanDelta.toFixed(6)}</td></tr>
                <tr><td>Volume adjustment</td><td>${analysis.details.volumeAdjustment.toFixed(3)}</td></tr>
            `;

            // Channel Details
            document.getElementById('channelDetails').innerHTML = `
                <tr><th>Channel</th><th>DC Offset</th><th>Min Level</th><th>Max Level</th><th>RMS</th></tr>
                ${analysis.channels.map((ch, index) => `
                    <tr>
                        <td>${index + 1}</td>
                        <td>${ch.dcOffset.toFixed(6)}</td>
                        <td>${ch.minLevel.toFixed(6)}</td>
                        <td>${ch.maxLevel.toFixed(6)}</td>
                        <td>${ch.rms.toFixed(6)}</td>
                    </tr>
                `).join('')}
            `;
        }

        function copyResults() {
            const text = Array.from(document.querySelectorAll('.metric-table'))
                .map(table => table.innerText)
                .join('\n\n');
            
            navigator.clipboard.writeText(text).then(() => {
                alert('Results copied to clipboard!');
            });
        }
    </script>
</body>
</html>
